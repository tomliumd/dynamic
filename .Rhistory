colnames(processed_df)
#The readmit dx sometimes is the reaason why there are multiples
processed_df <- processed_df[!duplicated(processed_df$KEY_NRD),]
#Options Here - remove instate:
instate <- processed_df[processed_df$RESIDENT==1,]
survived_to_dc <- processed_df[processed_df['DIED'] == 0,]
survived_to_dc$emergency.readmit30 <- survived_to_dc$ELECTIVE.readmit30d == 0
survived_to_dc$emergency.readmit90 <- survived_to_dc$ELECTIVE.readmit90d == 0
table(processed_df[c("DIED")])
prop.table(table(processed_df[c("DIED")]))
table(processed_df$ZIPINC_QRTL)
prop.table(table(processed_df$ZIPINC_QRTL))
table(processed_df[c("ZIPINC_QRTL", "DIED")])
chisq.test(processed_df$ZIPINC_QRTL, processed_df$DIED)
table(processed_df$ZIPINC_QRTL)
#In hospital death
table(processed_df[c("DIED")])
prop.table(table(processed_df[c("DIED")]))
table(processed_df$ZIPINC_QRTL)
prop.table(table(processed_df$ZIPINC_QRTL))
table(processed_df[c("ZIPINC_QRTL", "DIED")])
chisq.test(processed_df$ZIPINC_QRTL, processed_df$DIED)
#AGE
#age is not normally distributed, slightly skewed
p <- ggplot(processed_df, aes(x=AGE, fill=as.factor(ZIPINC_QRTL))) + geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') + scale_fill_manual(values=c("#FFE9A0", "#367E18", "#F57328", "#CC3636")) +
theme_classic(); p
tapply(processed_df$AGE, processed_df$ZIPINC_QRTL, median)
age.anova <- aov(processed_df$AGE~processed_df$ZIPINC_QRTL); age.anova
summary(age.anova)
tapply(processed_df$AGE, processed_df$ZIPINC_QRTL, mean)
summary(processed_df$AGE)
summary(processed_df$AGE, na.rm=T)
summary(processed_df$AGE, rm.na=T)
summary(processed_df$AGE, rm.na=TRUE)
summary(processed_df$AGE, na.rm=TRUE)
sd(processed_df, na.rm=T)
sd(processed_df$AGE, na.rm=T)
tapply(processed_df$AGE, processed_df$ZIPINC_QRTL, mean)
age.anova <- aov(processed_df$AGE~processed_df$ZIPINC_QRTL); age.anova
tapply(processed_df$AGE, processed_df$ZIPINC_QRTL, mean)
tapply(processed_df$AGE, processed_df$ZIPINC_QRTL, sd)
colnames(processed_df)
table(processed_df[c("DIED")])
prop.table(table(processed_df[c("DIED")]))
table(processed_df$ZIPINC_QRTL)
prop.table(table(processed_df$ZIPINC_QRTL))
table(processed_df[c("ZIPINC_QRTL", "DIED")])
prop.table(table(processed_df[c("ZIPINC_QRTL", "DIED")]), 1)
table(survived_to_dc[c("urban", "readmit30")])
colnames(processed_df)
table(processed_df[c("DIED")])
prop.table(table(processed_df[c("DIED")]))
table(processed_df$ZIPINC_QRTL)
prop.table(table(processed_df$ZIPINC_QRTL))
table(processed_df[c("ZIPINC_QRTL", "DIED")])
prop.table(table(processed_df[c("ZIPINC_QRTL", "DIED")]), 1)
colnames(processed_df)
#CCI
#age is not normally distributed, slightly skewed
p <- ggplot(instate, aes(x=elixscore, fill=as.factor(ZIPINC_QRTL))) + geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') + scale_fill_manual(values=c("#FFE9A0", "#367E18", "#F57328", "#CC3636")) +
theme_classic(); p
# Baseline Analysis
table(survived_to_dc[c("DIED")])
prop.table(table(survived_to_dc[c("DIED")]))
table(survived_to_dc$ZIPINC_QRTL)
p <- ggplot(survived_to_dc, aes(x=AGE, fill=as.factor(ZIPINC_QRTL))) + geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') + scale_fill_manual(values=c("#FFE9A0", "#367E18", "#F57328", "#CC3636")) +
theme_classic(); p
tapply(survived_to_dc$AGE, survived_to_dc$ZIPINC_QRTL, mean)
tapply(survived_to_dc$AGE, survived_to_dc$ZIPINC_QRTL, sd)
age.anova <- aov(survived_to_dc$AGE~survived_to_dc$ZIPINC_QRTL); age.anova
summary(age.anova)
prop_table <- function(x) {
return(prop.table(table(x)))
}
p <- basic_table() %>%
split_cols_by("ZIPINC_QRTL") %>%
analyze(vars=c("AGE", "FEMALE", "CHF", "diab", "hypertension", "OBESE", "PAY1"), afun=function(x, ...) {
if (is.numeric(x)) {
in_rows(
"Median (IQR)" = rcell(c(median(x), quantile(x)[c(2, 4)]), format = "xx.xx (xx.xx - xx.xx)")
)
} else if (is.factor(x) || is.character(x)) {
in_rows(.list=list_wrap_x(prop_table)(x))
} else {
stop("type not supported")
}
}) %>%
build_table(tibble(processed_df)); p
colnames(processed_df)
processed_df$diabc
processed_df$FEMALE
colnames(processed_df)
table(processed_df$PAY1)
year = 2016
sev.filepath = paste("/Users/Tom/Documents/National Readmissions Database/NRD_", year, "/NRD_", year, "_Severity.CSV", sep="")
sev <- read.csv(sev.filepath, header = F)
colnames(sev) <- get(paste('sev', year, '.columnheads', sep=""))
colnames(sev)
get(paste('hosp', year, '.columnheads', sep=""))
get(paste('core', year, '.columnheads', sep=""))
#############################################################################
# Tom Liu
# Created on 09/17/2022
# This program will load the NRD_20xx_Hospital CSV File into SAS.
#############################################################################
source("/Users/Tom/Documents/National Readmissions Database/Code/ColumnHeaders.R")
source("/Users/Tom/Documents/Master R Files/Master Data Processing Tools.R")
#############################################################################
# Load packages needed.
# comorbidity
# epitools -
# base packages: reshape2,
#############################################################################
library(tibble)
library(rtables)
remotes::install_github("ellessenne/comorbidity")
library(comorbidity)
install.packages('epitools')
require(epitools)
require(reshape2)
for (year in c("2016", "2017", "2018", "2019")) {
year = as.numeric(year)
filepath = paste("/Users/Tom/Documents/National Readmissions Database/NRD_", year, "/NRD_", year, "_Core.CSV", sep="")
#initiate core file and label columns
core <- read.csv(filepath, header = F)
colnames(core) <- get(paste('core', year, '.columnheads', sep=""))
#These columns will have the ICD codes we care about
dxcodes <- paste("I10_DX", c(seq(1:50)), sep="")[paste("I10_DX", c(seq(1:50)), sep="") %in% get(paste('core', year, '.columnheads', sep=""))]
sxcodes <- paste("I10_PR", c(seq(1:50)), sep="")[paste("I10_PR", c(seq(1:50)), sep="") %in% get(paste('core', year, '.columnheads', sep=""))]
#Select columns from core file
paste('Obtaining diagnoses from core', year, sep="")
core <- core[c(c("HOSP_NRD", "KEY_NRD", "AGE", "LOS", "DMONTH",
"ELECTIVE", "FEMALE", "PAY1", "ZIPINC_QRTL", "DIED", "DISCWT",
"DISPUNIFORM", "REHABTRANSFER", "MDC", "TOTCHG", "NRD_STRATUM",
"NRD_VisitLink","NRD_DaysToEvent", "HCUP_ED", "YEAR", "RESIDENT"),
dxcodes, sxcodes)]
#######Obtains sorted file#######
# assign(paste('core', year, sep=""), read.csv('/Users/Tom/Desktop/aortic.csv', header=TRUE))
# processed_df <- get(paste('core', year, sep="")); assign(paste('core', year, sep=""), NULL)
processed_df <- core
#Order all NRD_DaysToEvent to identify index admission
processed_df <- processed_df[order(processed_df$NRD_DaysToEvent),]
#remove age <18
processed_df <- processed_df[processed_df$AGE >= 18,]
#remove unknown zipinc quartile
processed_df <- processed_df[processed_df$ZIPINC_QRTL >= 1,]
#remove unknown hospital LOS
processed_df <- processed_df[processed_df$LOS >= 0,]
cat("Number in cohort"); print(nrow(processed_df))
#######Identify index event#######
print(paste(dxcodes, sxcodes))
#core$cohort --> 1 if aortadx and aortasx true, 0 if false
core$cohort <- apply(core[dxcodes], 1, function(x) any(x %in% diagnosis.codes)) & apply(core[sxcodes], 1, function(x) any(x %in% procedure.codes))
#core$aortadx --> Diagnoses that are ATAAD
core$aortadx <- apply(core[dxcodes], 1, function(x) any(x %in% diagnosis.codes))
core$aortadx_id <- apply(core[dxcodes], 1, function(x) which(x %in% diagnosis.codes))
#core$aortasx --> Surgery that is Aorta
core$aortasx <- apply(core[sxcodes], 1, function(x) any(x %in% procedure.codes))
core$aortasx_id <- apply(core[sxcodes], 1, function(x) which(x %in% procedure.codes))
cat("Cohort for year ", year, ": ", sep=""); table(core$cohort)
#Inclusion Month < October, Survived to DC, LOS positive, AGE 18+, Non-Elective Admission, Surgery and ATAAD dx
core$IndexEvent <- core$DMONTH <= 9 &
core$DIED == 0 & core$LOS >= 0 & core$AGE >= 18 & core$ELECTIVE == 0 &
(core$aortadx | core$aortasx)
cat("Frequency of IndexEvent : \n"); print(table(core$IndexEvent))
#######Calculate discharge dates for index events#######
core$PseudoDDate[core$IndexEvent] <- core$NRD_DaysToEvent[core$IndexEvent] +
ifelse(core$LOS >= 0,
core$LOS, NA)[core$IndexEvent]
#######Identify readmission events and subset dissection index events#######
indexE <- subset(core, IndexEvent == 1, select = c(HOSP_NRD,
KEY_NRD,
NRD_VisitLink,
PseudoDDate))
readmits <- subset(core, select = c( c(KEY_NRD, NRD_VisitLink,
NRD_DaysToEvent, ELECTIVE, DIED, HCUP_ED, I10_DX1, I10_DX2)))
# readmits <- merge(readmits, core[c("KEY_NRD", "NRD_VisitLink", dxcodes)], by=c("KEY_NRD", "NRD_VisitLink"), all.x=TRUE)
colnames(readmits)[colnames(readmits) == "KEY_NRD"] <- "KEY_NRD_R"
colnames(readmits)[colnames(readmits) == "ELECTIVE"] <- "ELECTIVE.readmit"
colnames(readmits)[colnames(readmits) == "DIED"] <- "DIED.readmit"
newdxcodes <- paste("readmitdx", c(seq(1:50)), sep="")[paste("I10_DX", c(seq(1:50)), sep="") %in% colnames(processed_df)]
readmits$readmitdx1 <- readmits$I10_DX1; readmits$readmitdx2 <- readmits$I10_DX2
# colnames(readmits)[colnames(readmits) %in% dxcodes] <- c("readmitdx1", "readmitdx2")
# Inner join index events with candidate readmissions
readmits <- merge(indexE, readmits, by = "NRD_VisitLink")
print(colnames(readmits))
# Subset to 30-day readmissions
readmits1 <- subset( readmits, KEY_NRD != KEY_NRD_R &
NRD_DaysToEvent >= PseudoDDate &
NRD_DaysToEvent <= ( PseudoDDate + 30 ),
select = c( HOSP_NRD, KEY_NRD, NRD_VisitLink, ELECTIVE.readmit, DIED.readmit, HCUP_ED))
print(colnames(readmits1))
readmit.num30d <- data.frame(table(readmits1$KEY_NRD))
colnames(readmit.num30d) <- c("KEY_NRD", "readmit.n30")
tmp <- readmits1
readmits1 <- unique(readmits1[c("KEY_NRD", "HOSP_NRD")])
readmits1$readmit30 <- 1
readmits1 <- merge(readmits1, tmp[c("KEY_NRD", "HOSP_NRD", "ELECTIVE.readmit", "DIED.readmit", "HCUP_ED")], by=c("KEY_NRD", "HOSP_NRD"))
colnames(readmits1)[colnames(readmits1) == "ELECTIVE.readmit"] <- "ELECTIVE.readmit30d"
colnames(readmits1)[colnames(readmits1) == "DIED.readmit"] <- "DIED.readmit30d"
readmits1 <- merge(readmits1, readmit.num30d, by="KEY_NRD")
print(colnames(readmits1))
# Subset to 90-day readmissions
readmits2 <- subset(readmits, KEY_NRD != KEY_NRD_R &
NRD_DaysToEvent >= PseudoDDate &
NRD_DaysToEvent <= (PseudoDDate + 90),
select = c(HOSP_NRD, KEY_NRD, NRD_VisitLink, ELECTIVE.readmit, DIED.readmit, readmitdx1, readmitdx2))
print(colnames(readmits2))
readmit.num90d <- data.frame(table(readmits2$KEY_NRD))
colnames(readmit.num90d) <- c("KEY_NRD", "readmit.n90")
tmp <- readmits2
readmits2 <- unique(readmits2[c("KEY_NRD", "HOSP_NRD")])
readmits2$readmit90 <- 1
readmits2 <- merge(readmits2, tmp[c("KEY_NRD", "HOSP_NRD", "ELECTIVE.readmit", "DIED.readmit", "readmitdx1", "readmitdx2")], by=c("KEY_NRD", "HOSP_NRD"))
colnames(readmits2)[colnames(readmits2) == "ELECTIVE.readmit"] <- "ELECTIVE.readmit90d"
colnames(readmits2)[colnames(readmits2) == "DIED.readmit"] <- "DIED.readmit90d"
readmits2 <- merge(readmits2, readmit.num90d, by="KEY_NRD")
readmits <- merge(readmits1, readmits2, by=c("HOSP_NRD", "KEY_NRD"), all=TRUE)
readmits[is.na(readmits$readmit30),]$readmit30 <- 0; readmits[is.na(readmits$readmit.n30),]$readmit.n30 <- 0
print(colnames(readmits))
# Merge readmission events with core file
core <- core[ with( core, order( HOSP_NRD, KEY_NRD )), ]
core <- core[order(core$NRD_DaysToEvent),]
print(table(core$IndexEvent))
core$HCUP_ED <- NULL
readmits <- readmits[ with( readmits, order( HOSP_NRD, KEY_NRD )), ]
core <- merge( core, readmits, by = c( "HOSP_NRD", "KEY_NRD" ), all.x = TRUE)
core$readmit30[is.na(core$readmit30)] <- 0
core$readmit90[is.na(core$readmit90)] <- 0
# Tabulate (unweighted) readmissions
cat("Frequency of readmit : \n"); print(table(core$readmit30))
cat("Frequency of readmit : \n"); print(table(core$readmit90))
print(colnames(core)); print(colnames(processed_df)); print(nrow(core)); processed_df$HCUP_ED <- NULL
core <- core[c("HOSP_NRD", "KEY_NRD",  "cohort", "aortadx", "aortasx",  "IndexEvent", "PseudoDDate", "readmit30", "readmit.n30", "readmit90", "readmit.n90", "ELECTIVE.readmit30d", "DIED.readmit30d", "ELECTIVE.readmit90d", "DIED.readmit90d", "HCUP_ED", "readmitdx1", "readmitdx2")]
temp <- merge(core[core$aortadx | core$aortasx,], processed_df, by=c("HOSP_NRD", "KEY_NRD"), all.x=TRUE)
######Assign Charleston Comorbidity######
score_df <- temp[c("KEY_NRD", dxcodes)]
score_df <- melt(temp, id="KEY_NRD")
score_df$variable <- NULL
score_df <- unique(score_df[!is.na(score_df$value),])
ccF <- comorbidity(x = score_df, id = "KEY_NRD", code = "value", map = "elixhauser_icd10_quan", assign0 = FALSE)
ccF$elixscore <- score(ccF, weights="swiss", assign0=TRUE)
ccF$numelix <- rowSums(ccF[,c(2:(ncol(ccF)-1))])
ccF2 <- comorbidity(x = score_df, id = "KEY_NRD", code = "value", map = "charlson_icd10_quan", assign0 = FALSE)
ccF2$charscore <- score(ccF2, weights="quan", assign0=TRUE)
ccF2$numchar <- rowSums(ccF2[,c(2:(ncol(ccF2)-1))])
ccF <- merge(ccF, ccF2[c("KEY_NRD", "charscore", "numchar")], by="KEY_NRD")
print(colnames(ccF)); print(colnames(processed_df)); colnames(hosp); print('merging')
temp <- merge(temp, ccF, by="KEY_NRD", all.x = TRUE)
######Merge with Hospital and Severity Tables######
hosp.filepath = paste("/Users/Tom/Documents/National Readmissions Database/NRD_", year, "/NRD_", year, "_Hospital.CSV", sep="")
hosp <- read.csv(hosp.filepath, header = F)
colnames(hosp) <- get(paste('hosp', year, '.columnheads', sep=""))
hosp$YEAR <- NULL; hosp$NRD_STRATUM <- NULL
sev.filepath = paste("/Users/Tom/Documents/National Readmissions Database/NRD_", year, "/NRD_", year, "_Severity.CSV", sep="")
sev <- read.csv(sev.filepath, header = F)
colnames(sev) <- get(paste('sev', year, '.columnheads', sep=""))
print(colnames(hosp)); print(hosp.filepath)
print(colnames(sev)); print(sev.filepath)
temp <- merge(temp, hosp, by='HOSP_NRD', all.x=TRUE)
temp <- merge(temp, sev, by=c('HOSP_NRD', 'KEY_NRD'), all.x=TRUE)
assign(paste('tmp', year, sep=''), temp)
core <- NULL
processed_df <- NULL
}
for (year in c("2016", "2017", "2018", "2019")) {
year = as.numeric(year)
filepath = paste("/Users/Tom/Documents/National Readmissions Database/NRD_", year, "/NRD_", year, "_Core.CSV", sep="")
#initiate core file and label columns
core <- read.csv(filepath, header = F)
colnames(core) <- get(paste('core', year, '.columnheads', sep=""))
#These columns will have the ICD codes we care about
dxcodes <- paste("I10_DX", c(seq(1:50)), sep="")[paste("I10_DX", c(seq(1:50)), sep="") %in% get(paste('core', year, '.columnheads', sep=""))]
sxcodes <- paste("I10_PR", c(seq(1:50)), sep="")[paste("I10_PR", c(seq(1:50)), sep="") %in% get(paste('core', year, '.columnheads', sep=""))]
#Select columns from core file
paste('Obtaining diagnoses from core', year, sep="")
core <- core[c(c("HOSP_NRD", "KEY_NRD", "AGE", "LOS", "DMONTH",
"ELECTIVE", "FEMALE", "PAY1", "ZIPINC_QRTL", "DIED", "DISCWT",
"DISPUNIFORM", "REHABTRANSFER", "MDC", "TOTCHG", "NRD_STRATUM",
"NRD_VisitLink","NRD_DaysToEvent", "HCUP_ED", "YEAR", "RESIDENT"),
dxcodes, sxcodes)]
#######Obtains sorted file#######
# assign(paste('core', year, sep=""), read.csv('/Users/Tom/Desktop/aortic.csv', header=TRUE))
# processed_df <- get(paste('core', year, sep="")); assign(paste('core', year, sep=""), NULL)
processed_df <- core
#Order all NRD_DaysToEvent to identify index admission
processed_df <- processed_df[order(processed_df$NRD_DaysToEvent),]
#remove age <18
processed_df <- processed_df[processed_df$AGE >= 18,]
#remove unknown zipinc quartile
processed_df <- processed_df[processed_df$ZIPINC_QRTL >= 1,]
#remove unknown hospital LOS
processed_df <- processed_df[processed_df$LOS >= 0,]
cat("Number in cohort"); print(nrow(processed_df))
#######Identify index event#######
print(paste(dxcodes, sxcodes))
#core$cohort --> 1 if aortadx and aortasx true, 0 if false
core$cohort <- apply(core[dxcodes], 1, function(x) any(x %in% diagnosis.codes)) & apply(core[sxcodes], 1, function(x) any(x %in% procedure.codes))
#core$aortadx --> Diagnoses that are ATAAD
core$aortadx <- apply(core[dxcodes], 1, function(x) any(x %in% diagnosis.codes))
core$aortadx_id <- apply(core[dxcodes], 1, function(x) which(x %in% diagnosis.codes))
#core$aortasx --> Surgery that is Aorta
core$aortasx <- apply(core[sxcodes], 1, function(x) any(x %in% procedure.codes))
core$aortasx_id <- apply(core[sxcodes], 1, function(x) which(x %in% procedure.codes))
cat("Cohort for year ", year, ": ", sep=""); table(core$cohort)
#Inclusion Month < October, Survived to DC, LOS positive, AGE 18+, Non-Elective Admission, Surgery and ATAAD dx
core$IndexEvent <- core$DMONTH <= 9 &
core$DIED == 0 & core$LOS >= 0 & core$AGE >= 18 & core$ELECTIVE == 0 &
(core$aortadx | core$aortasx)
cat("Frequency of IndexEvent : \n"); print(table(core$IndexEvent))
#######Calculate discharge dates for index events#######
core$PseudoDDate[core$IndexEvent] <- core$NRD_DaysToEvent[core$IndexEvent] +
ifelse(core$LOS >= 0,
core$LOS, NA)[core$IndexEvent]
#######Identify readmission events and subset dissection index events#######
indexE <- subset(core, IndexEvent == 1, select = c(HOSP_NRD,
KEY_NRD,
NRD_VisitLink,
PseudoDDate))
readmits <- subset(core, select = c( c(KEY_NRD, NRD_VisitLink,
NRD_DaysToEvent, ELECTIVE, DIED, HCUP_ED, I10_DX1, I10_DX2)))
# readmits <- merge(readmits, core[c("KEY_NRD", "NRD_VisitLink", dxcodes)], by=c("KEY_NRD", "NRD_VisitLink"), all.x=TRUE)
colnames(readmits)[colnames(readmits) == "KEY_NRD"] <- "KEY_NRD_R"
colnames(readmits)[colnames(readmits) == "ELECTIVE"] <- "ELECTIVE.readmit"
colnames(readmits)[colnames(readmits) == "DIED"] <- "DIED.readmit"
newdxcodes <- paste("readmitdx", c(seq(1:50)), sep="")[paste("I10_DX", c(seq(1:50)), sep="") %in% colnames(processed_df)]
readmits$readmitdx1 <- readmits$I10_DX1; readmits$readmitdx2 <- readmits$I10_DX2
# colnames(readmits)[colnames(readmits) %in% dxcodes] <- c("readmitdx1", "readmitdx2")
# Inner join index events with candidate readmissions
readmits <- merge(indexE, readmits, by = "NRD_VisitLink")
print(colnames(readmits))
# Subset to 30-day readmissions
readmits1 <- subset( readmits, KEY_NRD != KEY_NRD_R &
NRD_DaysToEvent >= PseudoDDate &
NRD_DaysToEvent <= ( PseudoDDate + 30 ),
select = c( HOSP_NRD, KEY_NRD, NRD_VisitLink, ELECTIVE.readmit, DIED.readmit, HCUP_ED))
print(colnames(readmits1))
readmit.num30d <- data.frame(table(readmits1$KEY_NRD))
colnames(readmit.num30d) <- c("KEY_NRD", "readmit.n30")
tmp <- readmits1
readmits1 <- unique(readmits1[c("KEY_NRD", "HOSP_NRD")])
readmits1$readmit30 <- 1
readmits1 <- merge(readmits1, tmp[c("KEY_NRD", "HOSP_NRD", "ELECTIVE.readmit", "DIED.readmit", "HCUP_ED")], by=c("KEY_NRD", "HOSP_NRD"))
colnames(readmits1)[colnames(readmits1) == "ELECTIVE.readmit"] <- "ELECTIVE.readmit30d"
colnames(readmits1)[colnames(readmits1) == "DIED.readmit"] <- "DIED.readmit30d"
readmits1 <- merge(readmits1, readmit.num30d, by="KEY_NRD")
print(colnames(readmits1))
# Subset to 90-day readmissions
readmits2 <- subset(readmits, KEY_NRD != KEY_NRD_R &
NRD_DaysToEvent >= PseudoDDate &
NRD_DaysToEvent <= (PseudoDDate + 90),
select = c(HOSP_NRD, KEY_NRD, NRD_VisitLink, ELECTIVE.readmit, DIED.readmit, readmitdx1, readmitdx2))
print(colnames(readmits2))
readmit.num90d <- data.frame(table(readmits2$KEY_NRD))
colnames(readmit.num90d) <- c("KEY_NRD", "readmit.n90")
tmp <- readmits2
readmits2 <- unique(readmits2[c("KEY_NRD", "HOSP_NRD")])
readmits2$readmit90 <- 1
readmits2 <- merge(readmits2, tmp[c("KEY_NRD", "HOSP_NRD", "ELECTIVE.readmit", "DIED.readmit", "readmitdx1", "readmitdx2")], by=c("KEY_NRD", "HOSP_NRD"))
colnames(readmits2)[colnames(readmits2) == "ELECTIVE.readmit"] <- "ELECTIVE.readmit90d"
colnames(readmits2)[colnames(readmits2) == "DIED.readmit"] <- "DIED.readmit90d"
readmits2 <- merge(readmits2, readmit.num90d, by="KEY_NRD")
readmits <- merge(readmits1, readmits2, by=c("HOSP_NRD", "KEY_NRD"), all=TRUE)
readmits[is.na(readmits$readmit30),]$readmit30 <- 0; readmits[is.na(readmits$readmit.n30),]$readmit.n30 <- 0
print(colnames(readmits))
# Merge readmission events with core file
core <- core[ with( core, order( HOSP_NRD, KEY_NRD )), ]
core <- core[order(core$NRD_DaysToEvent),]
print(table(core$IndexEvent))
core$HCUP_ED <- NULL
readmits <- readmits[ with( readmits, order( HOSP_NRD, KEY_NRD )), ]
core <- merge( core, readmits, by = c( "HOSP_NRD", "KEY_NRD" ), all.x = TRUE)
core$readmit30[is.na(core$readmit30)] <- 0
core$readmit90[is.na(core$readmit90)] <- 0
# Tabulate (unweighted) readmissions
cat("Frequency of readmit : \n"); print(table(core$readmit30))
cat("Frequency of readmit : \n"); print(table(core$readmit90))
print(colnames(core)); print(colnames(processed_df)); print(nrow(core)); processed_df$HCUP_ED <- NULL
core <- core[c("HOSP_NRD", "KEY_NRD",  "cohort", "aortadx", "aortasx",  "IndexEvent", "PseudoDDate", "readmit30", "readmit.n30", "readmit90", "readmit.n90", "ELECTIVE.readmit30d", "DIED.readmit30d", "ELECTIVE.readmit90d", "DIED.readmit90d", "HCUP_ED", "readmitdx1", "readmitdx2")]
temp <- merge(core[core$aortadx | core$aortasx,], processed_df, by=c("HOSP_NRD", "KEY_NRD"), all.x=TRUE)
######Assign Charleston Comorbidity######
score_df <- temp[c("KEY_NRD", dxcodes)]
score_df <- melt(temp, id="KEY_NRD")
score_df$variable <- NULL
score_df <- unique(score_df[!is.na(score_df$value),])
ccF <- comorbidity(x = score_df, id = "KEY_NRD", code = "value", map = "elixhauser_icd10_quan", assign0 = FALSE)
ccF$elixscore <- score(ccF, weights="swiss", assign0=TRUE)
ccF$numelix <- rowSums(ccF[,c(2:(ncol(ccF)-1))])
ccF2 <- comorbidity(x = score_df, id = "KEY_NRD", code = "value", map = "charlson_icd10_quan", assign0 = FALSE)
ccF2$charscore <- score(ccF2, weights="quan", assign0=TRUE)
ccF2$numchar <- rowSums(ccF2[,c(2:(ncol(ccF2)-1))])
ccF <- merge(ccF, ccF2[c("KEY_NRD", "charscore", "numchar")], by="KEY_NRD")
print(colnames(ccF)); print(colnames(processed_df))
temp <- merge(temp, ccF, by="KEY_NRD", all.x = TRUE)
######Merge with Hospital and Severity Tables######
hosp.filepath = paste("/Users/Tom/Documents/National Readmissions Database/NRD_", year, "/NRD_", year, "_Hospital.CSV", sep="")
hosp <- read.csv(hosp.filepath, header = F)
colnames(hosp) <- get(paste('hosp', year, '.columnheads', sep=""))
hosp$YEAR <- NULL; hosp$NRD_STRATUM <- NULL
sev.filepath = paste("/Users/Tom/Documents/National Readmissions Database/NRD_", year, "/NRD_", year, "_Severity.CSV", sep="")
sev <- read.csv(sev.filepath, header = F)
colnames(sev) <- get(paste('sev', year, '.columnheads', sep=""))
print(colnames(hosp)); print(hosp.filepath)
print(colnames(sev)); print(sev.filepath)
temp <- merge(temp, hosp, by='HOSP_NRD', all.x=TRUE)
temp <- merge(temp, sev, by=c('HOSP_NRD', 'KEY_NRD'), all.x=TRUE)
assign(paste('tmp', year, sep=''), temp)
core <- NULL
processed_df <- NULL
}
library(plyr)
# tmp2016 <- tmp2016[order(tmp2016$NRD_DaysToEvent),]; tmp2017 <- tmp2017[order(tmp2017$NRD_DaysToEvent),]; tmp2018 <- tmp2018[order(tmp2018$NRD_DaysToEvent),]; tmp2019 <- tmp2019[order(tmp2019$NRD_DaysToEvent),]
# tmp2016 <- tmp2016[!duplicated(tmp2016$KEY_NRD),]; tmp2017 <- tmp2017[!duplicated(tmp2017$KEY_NRD),]; tmp2018 <- tmp2018[!duplicated(tmp2018$KEY_NRD),]; tmp2019 <- tmp2019[!duplicated(tmp2019$KEY_NRD),]
processed_df <- rbind.fill(tmp2016, tmp2017, tmp2018, tmp2019)
processed_df <- processed_df[order(processed_df$NRD_DaysToEvent),]
processed_df$index = processed_df$DMONTH <= 9 &
processed_df$LOS >= 0 & processed_df$AGE >= 18 & processed_df$ELECTIVE == 0 &
(processed_df$aortadx | processed_df$aortasx)
processed_df <- processed_df[processed_df$index & processed_df$cohort & processed_df$ZIPINC_QRTL >= 0 & processed_df$DIED >= 0,]
processed_df <- processed_df[!duplicated(processed_df),]
write.csv(processed_df, file='/Users/Tom/Documents/National Readmissions Database/Code/processed5.csv')
#######Read data file after inclusion and exclusion criteria applied#######
processed_df <- read.csv(file='/Users/Tom/Documents/National Readmissions Database/Code/processed5.csv', header=T)
#Change datatypes to be able to work with them
processed_df$ZIPINC_QRTL <- as.factor(processed_df$ZIPINC_QRTL)
processed_df$FEMALE <- as.factor(processed_df$FEMALE)
processed_df$PAY1 <- as.factor(processed_df$PAY1)
levels(processed_df$PAY1) <- c("Uninsured", "Uninsured", "Medicare", "Medicaid", "Private", "Uninsured", "Uninsured", "Uninsured")
processed_df$PAY1 <- factor(processed_df$PAY1, levels=c("Medicare", "Medicaid", "Private", "Uninsured"))
levels(processed_df$FEMALE) <- c("MALE", "FEMALE")
colnames(processed_df)
#The readmit dx sometimes is the reaason why there are multiples
processed_df <- processed_df[!duplicated(processed_df$KEY_NRD),]
colnames(processed_df)
install.packages('/Users/Tom/Documents/Master R Files/icd')
install.packages('/Users/Tom/Documents/Master R Files/icd')
library(icd.data)
icd10_pcs_2018$long_desc <- as.character(icd10_pcs_2018$long_desc)
icd10_pcs_2018$long_desc %in% c('mitral', 'Mitral')
year = 2016
temp = get(paste('icd10_pcs_', year, sep=""))
temp$long_desc <- as.character(temp$long_desc)
temp$long_desc
tolower(temp$long_desc)
tolower(temp$long_desc) %in% ('mitral')
temp[tolower(temp$long_desc) %in% ('mitral'),]$long_desc
temp[tolower(temp$long_desc) %in% c('mitral'),]$long_desc
temp$long_desc %in% c('mitral', 'Mitral')
temp[temp$long_desc %in% c('mitral', 'Mitral'),]
year = 2018
temp = get(paste('icd10_pcs_', year, sep=""))
temp$long_desc <- as.character(temp$long_desc)
temp[temp$long_desc %in% c('mitral', 'Mitral'),]
temp$long_desc
temp$long_desc %in% c('Approach')
temp[temp$long_desc %in% c('Approach'),]
temp[grepl('Mitral', temp$long_desc) & !grepl('Revision|Dilation', temp$long_desc),]
temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('revision|dilation', tolower(temp$long_desc))),]
temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('revision|dilation', tolower(temp$long_desc)),]
temp[grepl('mitral', tolower(temp$long_desc)),]
temp[grepl('ablation', tolower(temp$long_desc)),]
temp[grepl('maze', tolower(temp$long_desc)),]
temp[grepl('02540ZZ', tolower(temp$long_desc)),]
temp[grepl('02540ZZ', tolower(temp$pcs)),]
temp[grepl('02550ZZ', tolower(as.character(temp$pcs))),]
temp[grepl('02583ZZ|02573ZZ|025T3ZZ|025S3ZZ|02563ZZ|02580ZZ', temp$pcs),]
ablation.codes <- c('02540ZZ', '02550ZZ', '02560ZZ', '02563ZZ', '02570ZK', '02570ZZ', '02573ZZ' , '02580ZZ', '02583ZZ')
paste(ablation.codes, sep='|')
paste(c(ablation.codes), sep='|')
paste(c(ablation.codes), collapse='|')
temp[grepl(paste(c(ablation.codes), collapse='|'), temp$pcs),]
ablation.codes <- c('02540ZZ', '02550ZZ', '02560ZZ', '02563ZZ', '02570ZK', '02570ZZ', '02573ZZ' , '02580ZZ', '02583ZZ','02L70ZK', '025S0ZZ', '025T0ZZ')
temp[grepl(paste(c(ablation.codes), collapse='|'), temp$pcs),]
temp[grepl(paste(c(ablation.codes), collapse='|'), temp$pcs) & grepl('open', tolower(temp$long_desc)),]
write.csv(temp[grepl(paste(c(ablation.codes), collapse='|'), temp$pcs) & grepl('open', tolower(temp$long_desc)),], file='/Users/Tom/Documents/National Readmissions Database/Code/MVR/Export/ICD10PCS_OpenAblation.csv')
#Save ICD10PCS_OpenAblation.csv
outfile.name = paste('/Users/Tom/Documents/National Readmissions Database/Code/MVR/Export/ICD10PCS_OpenAblation_', year, '.csv'
#Save ICD10PCS_OpenAblation.csv
outfile.name = paste('/Users/Tom/Documents/National Readmissions Database/Code/MVR/Export/ICD10PCS_OpenAblation_', year, '.csv')
paste('/Users/Tom/Documents/National Readmissions Database/Code/MVR/Export/ICD10PCS_OpenAblation_', year, '.csv')
#Save ICD10PCS_OpenAblation.csv
outfile.name = paste('/Users/Tom/Documents/National Readmissions Database/Code/MVR/Export/ICD10PCS_OpenAblation_', year, '.csv', sep='')
write.csv(temp[grepl(paste(c(ablation.codes), collapse='|'), temp$pcs) & grepl('open', tolower(temp$long_desc)),], file=outfile.name)
temp[grepl('mitral', temp$long_desc),]
temp[grepl('mitral', tolower(temp$long_desc)),]
temp[grepl('mitral', tolower(temp$long_desc)) & grepl('destruction|dilaation|excision', tolower(temp$long_desc)),]
temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilaation|excision', tolower(temp$long_desc)),]
temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilaation|excision|replace', tolower(temp$long_desc)),]
temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilation|excision|replace', tolower(temp$long_desc)),]
write.csv(temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilation|excision|replace', tolower(temp$long_desc)),], file='/Users/Tom/Documents/National Readmissions Database/Code/MVR/Export/ICD10PCS_OpenAblation_ASKMEHTA.csv')
temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilation|excision|replace|supplement|restriction|release', tolower(temp$long_desc)),]
temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilation|excision|replace|supplement|restriction|release|creat|revisi', tolower(temp$long_desc)),]
temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilation|excision|replace|supplement|restriction|release|revisi', tolower(temp$long_desc)),]
temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilation|excision|replace|supplement|restriction|release|revisi|creation|extirp', tolower(temp$long_desc)),]
######Save ICD10PCS_MVR.csv######
outfile.name = paste('/Users/Tom/Documents/National Readmissions Database/Code/MVR/Export/ICD10PCS_OpenMVR_', year, '.csv', sep='')
mvr.df = temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilation|excision|replace|supplement|restriction|release|revisi|creation|extirp', tolower(temp$long_desc)),]
write.csv(temp[grepl('mitral', tolower(temp$long_desc)) & !grepl('destruction|dilation|excision|replace', tolower(temp$long_desc)),], file='/Users/Tom/Documents/National Readmissions Database/Code/MVR/Export/ICD10PCS_OpenAblation_ASKMEHTA.csv')
write.csv(mvr.df, file=outfile.name)
######ICD-10######
##################
icd10_chapters
######ICD-10######
##################
icd10_sub_chapters
######ICD-10######
##################
icd10cm2016
colnames(icd10cm2016)
temp = icd10cm2016
temp$long_desc <- as.character(temp$long_desc)
temp[grepl('mitral', tolower(temp$long_desc)),]
